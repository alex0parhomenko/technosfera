{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Реализация алгоритма стохастического градиентного бустинга с\n",
    "# квадратичной функцией потерь. В качестве базового алгоритма\n",
    "# использовать алгоритм CART с RSM."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import sklearn as sk\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.cross_validation import KFold\n",
    "from sklearn import tree\n",
    "from sklearn import ensemble\n",
    "from sklearn import datasets\n",
    "\n",
    "import matplotlib.pylab as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# READ DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "f = open(\"spam.train.txt\", \"r\")\n",
    "y_true = []\n",
    "data = []\n",
    "for line in f:\n",
    "    line = line[:len(line) - 1]\n",
    "    arr = line.split(' ')\n",
    "    y_true.append(arr[0])\n",
    "    del arr[0]\n",
    "\n",
    "    data.append(arr)\n",
    "data = np.asarray(data, dtype = np.float)\n",
    "y_true = np.asarray(y_true, dtype = np.float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "f = open(\"spam.test.txt\", \"r\")\n",
    "test_data = []\n",
    "test_y = []\n",
    "for line in f:\n",
    "    line = line[:len(line) - 1]\n",
    "    arr = line.split(' ')\n",
    "    test_y.append(arr[0])\n",
    "    del arr[0]\n",
    "    test_data.append(arr)\n",
    "    \n",
    "test_data = np.asarray(test_data, dtype = np.float)\n",
    "test_y = np.asarray(test_y, dtype = np.float)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Stochastic Gradient Boosting Implemention"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class stochastic_gradient_boosting:\n",
    "    def __init__(self, n_estimators, features_rate, min_samples_split, learning_rate, max_depth):\n",
    "        self.n_estimators = n_estimators\n",
    "        self.features_rate = features_rate\n",
    "        self.min_samples_split = min_samples_split\n",
    "        self.shrinkage_value = learning_rate\n",
    "        \n",
    "        if (max_depth == None):\n",
    "            self.max_depth = 10000\n",
    "        else:\n",
    "            self.max_depth = max_depth\n",
    "            \n",
    "    def get_predict_for_sample_and_one_tree(self, sample, tree_map):\n",
    "        now_vertex = 0\n",
    "        while (1):\n",
    "            if (tree_map[str(now_vertex)][1][0] == 1):\n",
    "                break\n",
    "            if (sample[tree_map[str(now_vertex)][0][0]] >= tree_map[str(now_vertex)][0][1]):\n",
    "                now_vertex = tree_map[str(now_vertex)][3][1]\n",
    "            else:\n",
    "                now_vertex = tree_map[str(now_vertex)][3][0]\n",
    "        return tree_map[str(now_vertex)][2][0]\n",
    "    \n",
    "    def get_predict_for_sample(self, sample):\n",
    "        answer = 0.0\n",
    "        for now_tree in range(len(self.trees_list)):\n",
    "            answer += self.trees_list[now_tree][0] * self.get_predict_for_sample_and_one_tree(sample, self.trees_list[now_tree][1])\n",
    "        return answer\n",
    "    \n",
    "    def get_gradient(self, x, y):\n",
    "        new_y = []\n",
    "        for i, sample in enumerate(x):\n",
    "            pred = self.get_predict_for_sample(sample)\n",
    "            new_y.append(2 * (y[i] - pred))\n",
    "        return new_y\n",
    "    \n",
    "    def predict_regression(self, x):\n",
    "        y_pred = []\n",
    "        for sample in x:\n",
    "            y_pred.append(self.get_predict_for_sample(sample))\n",
    "        return np.asarray(y_pred, dtype = np.float)\n",
    "    \n",
    "    def gen_tree(self, element_numbers, vertex_num, mean_value, now_tree_depth, mse_value):\n",
    " \n",
    "        if (now_tree_depth == self.tree_depth):  \n",
    "            self.tree_map[str(vertex_num)] = [[None, None], [1], [mean_value], [None, None]]\n",
    "            return 0\n",
    "        \n",
    "        now_mse = mse_value\n",
    "        pos_num_split = np.nan\n",
    "        value_split = np.nan\n",
    "        \n",
    "        for feature_num in range(self.features_cou_analize):\n",
    "            #sort_ind = data[:,pos_num].argsort()\n",
    "            #data = data[sort_ind]\n",
    "            #y_true = y_true[sort_ind]\n",
    "            now_features = self.sort_x[feature_num][0][:,feature_num]\n",
    "            #right_sum = np.sum(y_true)\n",
    "            #right_true = list(y_true)\n",
    "            right_pos = list(element_numbers)\n",
    "            \n",
    "            #left_sum = 0.0\n",
    "            #left_true = []\n",
    "            left_pos = []\n",
    "                \n",
    "            for i, feature_value in enumerate(now_features):\n",
    "                feature_value_split = feature_value\n",
    "                \n",
    "                while (1):\n",
    "                    if (self.sort_x[feature_num][0][right_pos[0]])\n",
    "                \n",
    "                while (1):\n",
    "                    if (data[right_pos[0]][pos_num] < feature_value_split):\n",
    "                        left_pos.append(right_pos[0])\n",
    "                        left_sum += right_true[0]\n",
    "                        left_true.append(right_true[0])\n",
    "                        \n",
    "                        right_sum -= right_true[0]\n",
    "                        del right_pos[0]\n",
    "                        del right_true[0]\n",
    "                    else:\n",
    "                        break\n",
    "                \n",
    "                \n",
    "                if (len(left_pos) < self.min_cou_elements):\n",
    "                    continue\n",
    "                elif (len(right_pos) < self.min_cou_elements):\n",
    "                    break\n",
    "                \n",
    "                right_predict = np.tile([right_sum * 1.0 / len(right_pos)], len(right_pos))\n",
    "                left_predict = np.tile([left_sum * 1.0 / len(left_pos)], len(left_pos))\n",
    "                \n",
    "                now_mse=sk.metrics.mean_squared_error(right_true,right_predict) +  sk.metrics.mean_squared_error(left_true,left_predict)\n",
    "\n",
    "                if (now_mse < mse_value):\n",
    "                    mse_value = now_mse\n",
    "                    pos_num_split = pos_num\n",
    "                    value_split = feature_value_split\n",
    "                    \n",
    "        left_data = []\n",
    "        left_true = []\n",
    "        right_data = []\n",
    "        right_true = []\n",
    "        \n",
    "        if (np.isnan(value_split)):\n",
    "            self.tree_map[str(vertex_num)]= [[None, None], [1], [mean_value], [None, None]]\n",
    "            return 0\n",
    "        \n",
    "        for i, sample in enumerate(data):\n",
    "            if (sample[pos_num_split] >= value_split):\n",
    "                right_data.append(sample)\n",
    "                right_true.append(y_true[i])\n",
    "            else:\n",
    "                left_data.append(sample)\n",
    "                left_true.append(y_true[i])\n",
    "        \n",
    "        if (len(left_true) < self.min_cou_elements or len(right_true) < self.min_cou_elements):\n",
    "            self.tree_map[str(vertex_num)]= [[None, None], [1], [mean_value], [None, None]]\n",
    "            return 0\n",
    "        else:\n",
    "            self.tree_map[str(vertex_num)] = [[pos_num_split, value_split], [0], [mean_value], [vertex_num*2 + 1, vertex_num*2 + 2]]\n",
    "            \n",
    "        self.gen_tree(left_data, left_true, positions, vertex_num*2 + 1, np.sum(left_true) *1.0 / len(left_true), now_tree_depth + 1)\n",
    "        self.gen_tree(right_data, right_true, positions, vertex_num*2 + 2, np.sum(right_true) *1.0/ len(right_true), now_tree_depth + 1)\n",
    "\n",
    "    \n",
    "    def fit(self, x, y):\n",
    "        self.cou_samples = len(y)\n",
    "        cou_features = (x.shape)[1]\n",
    "        self.sort_x = []\n",
    "        self.tree_map = {}\n",
    "        for feature_pos in range(cou_features):\n",
    "            sort_ind = x[:,feature_pos].argsort()\n",
    "            feature_sort = np.sort(x[:, feature_pos])\n",
    "            self.sort_x.append([feature_sort, y[sort_ind]])\n",
    "\n",
    "        self.trees_list = []\n",
    "        \n",
    "        for i in range(self.n_estimators):\n",
    "            self.tree_map = {}\n",
    "            index = np.random.choice(self.cou_samples, self.cou_samples / 2, replace=False)\n",
    "            now_x = x[index]\n",
    "            now_y = y[index]\n",
    "            \n",
    "            self.gen_tree()\n",
    "            self.trees_list.append([self.shrinkage_value, self.tree_map])\n",
    "        return self.trees_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
